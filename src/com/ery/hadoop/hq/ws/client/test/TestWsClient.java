package com.ery.hadoop.hq.ws.client.test;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.ery.hadoop.hq.ws.client.MetaWsClient;
import com.ery.hadoop.hq.ws.client.MetaWsClientProxy;
import com.ery.hadoop.hq.ws.utils.MetaWsDataUtil;
import com.ery.base.support.utils.Convert;

/**
 * This class was generated by Apache CXF 2.5.2 2012-10-26T17:46:20.734+08:00
 * Generated source version: 2.5.2
 * 
 */
public final class TestWsClient {

	public static final int QUERY_PAGE = 1; // 分页查询
	static int num = 1;
	static int type = 0;// 查询类型 1：分页查询

	public static void main(String[] args) throws Exception {

		// 初始客户端（系统启动时调用一次）
		MetaWsClient.setAddress("http://localhost:8080/HadoopWebClient");
		// MetaWsClient.setAddress("http://133.37.31.51:8080/mrddx");
		MetaWsClient.setUsername("wxwy");
		MetaWsClient.setPassword("wxwy123");
		MetaWsClient.init();// 初始，仅需调用一次

		if (args.length > 0) {
			type = Convert.toInt(args[0], 0);
		}
		if (args.length > 1) {
			num = Convert.toInt(args[1], 1);
		}
		// requestWS();

		requestHTWS();
		requestModifyWS();
		// requestDeleteWS();
	}

	private static void requestDeleteWS() {
		// 需要执行WS请求时，先获取代理对象
		MetaWsClientProxy proxy = MetaWsClient.getClientProxy();
		HashMap<String, Object> param = new HashMap<String, Object>();
		param.put("USERID", "wxwy");
		param.put("PASSWD", "wxwy123");
		param.put("HT_NAME", "HbaseDcc_test");
		param.put("SOURCE_ID", "1060");

		List<String> lst = new ArrayList<String>();
		lst.add("13301278206-2013/07/30 15:56:57");
		param.put("ITEM_DATA", MetaWsDataUtil.toJSON(lst));

		// 请求数据
		Map<?, ?> obj = proxy.executeBySimpleMap("hbase05", Map.class, param);
		System.out.println(MetaWsDataUtil.toJSON(obj));
		System.exit(0);
	}

	private static void requestModifyWS() {
		// 需要执行WS请求时，先获取代理对象
		MetaWsClientProxy proxy = MetaWsClient.getClientProxy();
		HashMap<String, Object> param = new HashMap<String, Object>();
		param.put("USERID", "wxwy");
		param.put("PASSWD", "wxwy123");
		param.put("HT_NAME", "chrsrp_201502");
		param.put("SOURCE_ID", "1060");

		List<HashMap<String, Object>> lst = new ArrayList<HashMap<String, Object>>();
		HashMap<String, Object> itemparam = new HashMap<String, Object>();
		itemparam.put("ROWID", "20150211_460030088822105 _2015-02-11 12:03:40");
		itemparam.put("MDN", "13301278205");
		itemparam.put("RECVBYTE", "51");
		itemparam.put("SENDBYTE", "60");
		lst.add(itemparam);
		param.put("ITEM_DATA", MetaWsDataUtil.toJSON(lst));

		// 修改数据
		Map<?, ?> obj = proxy.executeBySimpleMap("hbase04", Map.class, param);
		System.out.println(MetaWsDataUtil.toJSON(obj));

		System.exit(0);
	}

	private static void requestHTWS() {
		// 需要执行WS请求时，先获取代理对象
		MetaWsClientProxy proxy = MetaWsClient.getClientProxy();
		HashMap<String, Object> param = new HashMap<String, Object>();
		param.put("USERID", "wxwy");
		param.put("PASSWD", "wxwy123");
		param.put("HT_NAME", "dpipi_d");
		param.put("SOURCE_ID", "1");
		param.put("START_KEY", "20150211");
		param.put("END_KEY", "20150212");
		param.put("COUNT", "10000");

		// 请求数据
		Map<?, ?> obj = proxy.executeBySimpleMap("hbase02", Map.class, param);
		// System.out.println(MetaWsDataUtil.toJSON(obj));

		HashMap<String, Object> putParam = new HashMap<String, Object>();
		putParam.put("USERID", "wxwy");
		putParam.put("PASSWD", "wxwy123");
		putParam.put("HT_NAME", "dpipi_d");
		putParam.put("SOURCE_ID", "1");

		List<HashMap<String, Object>> lst = new ArrayList<HashMap<String, Object>>();
		List<String> delLst = new ArrayList<String>();

		HashMap<String, Object> result = (HashMap<String, Object>) obj.get("result");
		List<List<Object>> values = (List<List<Object>>) result.get("values");
		String startRow = "";
		for (int i = 0; i < values.size(); i++) {
			List<Object> row = values.get(i);
			String rowId = row.get(row.size() - 1).toString();

			String[] tmp = rowId.split("_");
			String rrowId = "";
			for (int j = 0; j < tmp.length; j++) {
				rrowId += tmp[j].trim() + "_";
			}
			rrowId = rrowId.substring(0, rrowId.length() - 1);

			if (!rrowId.equals(rowId)) {
				HashMap<String, Object> itemparam = new HashMap<String, Object>();
				itemparam.put("ROWID", rrowId);
				delLst.add(rowId);
				List<String> enField = (List<String>) result.get("enField");
				for (int j = 0; j < row.size() - 1; j++) {
					// if (enField.get(j).equals("cause"))
					{
						itemparam.put(enField.get(j), row.get(j).toString());
					}
				}
				lst.add(itemparam);
				if (lst.size() > 500) {
					putParam.put("ITEM_DATA", MetaWsDataUtil.toJSON(lst));
					// 请求数据
					obj = proxy.executeBySimpleMap("hbase04", Map.class, putParam);
					HashMap<String, Object> moult = (HashMap<String, Object>) obj.get("result");
					if (!moult.get("status").toString().equals("true")) {
						System.out.println(startRow);
						break;
					} else {
						startRow = rowId;
						lst.clear();
					}
				}
			}
		}
		putParam.put("ITEM_DATA", MetaWsDataUtil.toJSON(lst));

		// 请求数据
		obj = proxy.executeBySimpleMap("hbase04", Map.class, putParam);

		System.out.println(MetaWsDataUtil.toJSON(obj));
		// 删除原数据
		HashMap<String, Object> moult = (HashMap<String, Object>) obj.get("result");
		if (moult.get("status").toString().equals("true")) {
			putParam.put("ITEM_DATA", MetaWsDataUtil.toJSON(delLst));
			obj = proxy.executeBySimpleMap("hbase05", Map.class, putParam);
			System.out.println(MetaWsDataUtil.toJSON(obj));
		}
		List<Object> row = values.get(values.size() - 1);
		String rowId = row.get(row.size() - 1).toString();
		System.out.println(rowId);
		System.exit(0);
	}

	private static void requestWS() {
		// 需要执行WS请求时，先获取代理对象
		MetaWsClientProxy proxy = MetaWsClient.getClientProxy();
		HashMap<String, Object> param = new HashMap<String, Object>();
		param.put("USERID", "wxwy");
		param.put("PASSWD", "wxwy123");
		param.put("QUERY_RULE_ID", "1");
		param.put("START_KEY", "2015");
		param.put("END_KEY", "2016");
		// 并发
		param.put("USE_GET", "true");
		param.put("parallel", "2");
		param.put(
				"rowkeys",
				"20150127-CD_1,20150127-CD_10,20150127-CD_11,20150127-CD_12,20150127-CD_13,20150127-CD_14,20150127-CD_15,20150127-CD_16,20150127-CD_17,20150127-CD_18,20150127-CD_19,20150127-CD_2,20150127-CD_20,20150127-CD_21,20150127-CD_22,20150127-CD_23,20150127-CD_24,20150127-CD_25,20150127-CD_26,20150127-CD_27,20150127-CD_28,20150127-CD_29,20150127-CD_3,20150127-CD_30,20150127-CD_31,20150127-CD_32,20150127-CD_33,20150127-CD_34,20150127-CD_35,20150127-CD_36,20150127-CD_37,20150127-CD_38,20150127-CD_39,20150127-CD_4,20150127-CD_40,20150127-CD_41,20150127-CD_42,20150127-CD_43,20150127-CD_44,20150127-CD_45,20150127-CD_46,20150127-CD_47,20150127-CD_48,20150127-CD_49,20150127-CD_5,20150127-CD_50,20150127-CD_51,20150127-CD_52,20150127-CD_53,20150127-CD_54,20150127-CD_55,20150127-CD_56,20150127-CD_57,20150127-CD_58,20150127-CD_59,20150127-CD_6,20150127-CD_60,20150127-CD_61,20150127-CD_62,20150127-CD_63,20150127-CD_64,20150127-CD_65,20150127-CD_66,20150127-CD_67,20150127-CD_68,20150127-CD_7,20150127-CD_8,20150127-CD_9");
		if (QUERY_PAGE == type) {
			param.put("CURRENT_PAGE", "1");
			param.put("PAGE_SIZE", "20");
			// param.put("ORDERBY_COLUMN", "DU-JC");
			param.put("ORDER_DESC", "0");// 0:asc 1:desc
		}

		// 请求数据
		long l = System.currentTimeMillis();
		Map<?, ?> obj = null;
		for (int i = 0; i < num; i++) {
			obj = proxy.executeBySimpleMap("hbase01", Map.class, param);
			if (i % 100 == 0 || i == num - 1) {
				System.out.println("complete " + (i + 1) + " Secondary");
			}
		}
		System.out.println("用时：" + (System.currentTimeMillis() - l) + " ms");
		System.out.println(MetaWsDataUtil.toJSON(obj));
		obj = (Map<?, ?>) obj.get("result");
		if (obj.get("status").equals("true")) {
			List lst = (List) obj.get("values");
			for (int j = 0; j < lst.size(); j++) {
				List row = (List) lst.get(j);
				System.out.println(row.get(3));
			}
		}
		System.exit(0);
	}
}
